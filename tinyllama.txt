package com.example.splunksearch;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

@SpringBootApplication
public class SplunkSearchApplication {

    public static void main(String[] args) {
        SpringApplication.run(SplunkSearchApplication.class, args);
    }

    @Bean
    public CommandLineRunner run() {
        return args -> {
            String baseUrl = "https://localhost:8089";
            String username = "<username>";
            String password = "<password>";
            RestTemplate restTemplate = new RestTemplate();

            // Step 1: Get a session key
            HttpHeaders headers = new HttpHeaders();
            MultiValueMap<String, String> body = new LinkedMultiValueMap<>();
            body.add("username", username);
            body.add("password", password);
            HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<>(body, headers);

            ResponseEntity<String> response = restTemplate.postForEntity(baseUrl + "/services/auth/login", request, String.class);
            String sessionKey = extractValueFromXml(response.getBody(), "sessionKey");
            System.out.println("====>sessionkey: " + sessionKey + " <====");

            // Step 2: Create a search job
            String searchQuery = "index=\"_internal\" | head 10";
            if (!searchQuery.startsWith("search")) {
                searchQuery = "search " + searchQuery;
            }

            headers.set("Authorization", "Splunk " + sessionKey);
            body = new LinkedMultiValueMap<>();
            body.add("search", searchQuery);
            request = new HttpEntity<>(body, headers);

            response = restTemplate.postForEntity(baseUrl + "/services/search/jobs", request, String.class);
            String sid = extractValueFromXml(response.getBody(), "sid");
            System.out.println("====>sid: " + sid + " <====");

            // Step 3: Get the search status
            String servicesSearchStatusStr = "/services/search/jobs/" + sid;
            boolean isNotDone = true;
            while (isNotDone) {
                ResponseEntity<String> statusResponse = restTemplate.exchange(baseUrl + servicesSearchStatusStr, HttpMethod.GET, new HttpEntity<>(headers), String.class);
                String isDoneStatus = extractValueFromXml(statusResponse.getBody(), "isDone");
                isNotDone = !"1".equals(isDoneStatus);
            }
            System.out.println("====>search status: 1 <====");

            // Step 4: Get the search results
            String servicesSearchResultsStr = "/services/search/jobs/" + sid + "/results?output_mode=json&count=0";
            ResponseEntity<String> resultsResponse = restTemplate.exchange(baseUrl + servicesSearchResultsStr, HttpMethod.GET, new HttpEntity<>(headers), String.class);
            System.out.println("====>search result: [" + resultsResponse.getBody() + "] <====");
        };
    }

    private String extractValueFromXml(String xml, String tagName) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document doc = builder.parse(new ByteArrayInputStream(xml.getBytes()));
        NodeList nodeList = doc.getElementsByTagName(tagName);
        return nodeList.item(0).getTextContent();
    }
}
