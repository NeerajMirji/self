import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.ListConsumerGroupOffsetsResult;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.clients.consumer.OffsetAndTimestamp;
import org.apache.kafka.common.TopicPartition;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;

@Service
public class KafkaOffsetService {

    @Autowired
    private AdminClient adminClient;

    @Autowired
    private KafkaConsumer<String, String> kafkaConsumer;

    public Map<TopicPartition, Long> getEndOffsetsForTimestamp(String topic, String consumerGroup, long timestamp) throws ExecutionException, InterruptedException {
        // Get current consumer group offsets
        ListConsumerGroupOffsetsResult result = adminClient.listConsumerGroupOffsets(consumerGroup);
        Map<TopicPartition, OffsetAndMetadata> offsets = result.partitionsToOffsetAndMetadata().get();

        Map<TopicPartition, Long> endOffsets = new HashMap<>();
        kafkaConsumer.partitionsFor(topic).forEach(partitionInfo -> {
            TopicPartition partition = new TopicPartition(partitionInfo.topic(), partitionInfo.partition());
            kafkaConsumer.assign(Collections.singletonList(partition));
            kafkaConsumer.seekToEnd(Collections.singletonList(partition));
            long endOffset = kafkaConsumer.position(partition);

            Map<TopicPartition, Long> timestampsToSearch = new HashMap<>();
            timestampsToSearch.put(partition, timestamp);
            Map<TopicPartition, OffsetAndTimestamp> offsetsForTimes = kafkaConsumer.offsetsForTimes(timestampsToSearch);

            OffsetAndTimestamp offsetAndTimestamp = offsetsForTimes.get(partition);
            if (offsetAndTimestamp != null && offsetAndTimestamp.offset() <= endOffset) {
                endOffsets.put(partition, offsetAndTimestamp.offset());
            } else {
                endOffsets.put(partition, endOffset);
            }
        });

        return endOffsets;
    }
}
