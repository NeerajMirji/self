HttpHeaders headers = new HttpHeaders();
                MultiValueMap<String, String> body = new LinkedMultiValueMap<>();
                body.add("username", username);
                body.add("password", password);
                HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<>(body, headers);

                ResponseEntity<String> response = restTemplate.postForEntity(baseUrl + "/services/auth/login", request, String.class);
                JSONObject jsonResponse = new JSONObject(response.getBody());
                String sessionKey = jsonResponse.getJSONObject("response").getString("sessionKey");
                LOGGER.info("====>sessionkey: " + sessionKey + " <====");

                // Step 2: Create a search job
                String searchQuery = "index=\"_internal\" | head 10";
                if (!searchQuery.startsWith("search")) {
                    searchQuery = "search " + searchQuery;
                }

                headers.set("Authorization", "Splunk " + sessionKey);
                body = new LinkedMultiValueMap<>();
                body.add("search", searchQuery);
                request = new HttpEntity<>(body, headers);

                response = restTemplate.postForEntity(baseUrl + "/services/search/jobs", request, String.class);
                jsonResponse = new JSONObject(response.getBody());
                String sid = jsonResponse.getString("sid");
                LOGGER.info("====>sid: " + sid + " <====");

                // Step 3: Get the search status
                String servicesSearchStatusStr = "/services/search/jobs/" + sid;
                boolean isNotDone = true;
                while (isNotDone) {
                    ResponseEntity<String> statusResponse = restTemplate.exchange(baseUrl + servicesSearchStatusStr, HttpMethod.GET, new HttpEntity<>(headers), String.class);
                    jsonResponse = new JSONObject(statusResponse.getBody());
                    String isDoneStatus = jsonResponse.getJSONObject("entry").getJSONArray("content").getJSONObject(0).getString("isDone");
                    if ("1".equals(isDoneStatus)) {
                        isNotDone = false;
                    } else {
                        Thread.sleep(1000); // Wait before checking again
                    }
                }
                LOGGER.info("====>search status: 1 <====");

                // Step 4: Get the search results
                String servicesSearchResultsStr = "/services/search/jobs/" + sid + "/results?output_mode=json&count=0";
                ResponseEntity<String> resultsResponse = restTemplate.exchange(baseUrl + servicesSearchResultsStr, HttpMethod.GET, new HttpEntity<>(headers), String.class);
                LOGGER.info("====>search result: [" + resultsResponse.getBody() + "] <====");

            } catch (Exception e) {
                LOGGER.log(Level.SEVERE, "Error occurred: ", e);
            }
