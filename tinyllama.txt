import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.*;

@Service
public class EventAcknowledgementService {

    @Autowired
    private EventAcknowledgementRepository repository;

    public Map<String, Object> getEventSummary(LocalDateTime startDate, LocalDateTime endDate) {
        List<EventAcknowledgement> events = repository.findAllByPublishedAtBetween(startDate, endDate);

        Map<String, Map<String, Object>> producersMap = new LinkedHashMap<>();

        for (EventAcknowledgement event : events) {
            // Sort the eventFlow by publishedAt before processing
            event.getEventFlow().sort(Comparator.comparing(ProducerDetails::getPublishedAt));

            for (ProducerDetails producer : event.getEventFlow()) {
                String producerApp = producer.getPublisherApp();

                producersMap.putIfAbsent(producerApp, new HashMap<>());
                Map<String, Object> producerData = producersMap.get(producerApp);
                producerData.put("producedCount", ((int) producerData.getOrDefault("producedCount", 0)) + 1);

                Map<String, Map<String, Object>> consumedByMap = (Map<String, Map<String, Object>>) producerData.getOrDefault("consumedBy", new HashMap<>());
                producerData.put("consumedBy", consumedByMap);

                for (ConsumerDetails consumer : producer.getPublishedTo()) {
                    String consumerApp = consumer.getConsumerApp();

                    consumedByMap.putIfAbsent(consumerApp, new HashMap<>());
                    Map<String, Object> consumerData = consumedByMap.get(consumerApp);
                    consumerData.put("consumedCount", ((int) consumerData.getOrDefault("consumedCount", 0)) + 1);

                    List<String> discrepancies = (List<String>) consumerData.getOrDefault("discrepancies", new ArrayList<>());
                    if (!consumer.getStatus().equals("SUCCESS")) {
                        discrepancies.add(event.getId()); // Assuming the event ID is the identifier for discrepancies
                    }
                    consumerData.put("discrepancies", discrepancies);
                }
            }
        }

        // Convert LinkedHashMap to maintain the insertion order which is based on sorted publishedAt
        Map<String, Object> response = new LinkedHashMap<>();
        response.put("producers", producersMap);

        return response;
    }
}
