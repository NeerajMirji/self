# streamlit_app.py
import streamlit as st
import requests
import networkx as nx
from pyvis.network import Network
import streamlit.components.v1 as components

# Function to create a hierarchical graph with manual layout adjustment
def create_hierarchical_graph(event_data):
    G = nx.DiGraph()

    # Add nodes and edges based on the event data
    for flow in event_data['eventFlow']:
        publisher = flow['publisherApp']
        publisher_time = flow['publishedAt']
        G.add_node(publisher, label=publisher, title=f"Published at: {publisher_time}", color='green')

        for consumer in flow['publishedTo']:
            consumer_app = consumer['consumerApp']
            consumer_time = consumer['consumedAt']
            status = consumer['status']
            color = 'green' if status == 'SUCCESS' else 'red'
            G.add_node(consumer_app, label=consumer_app, title=f"Consumed at: {consumer_time}", color=color)
            G.add_edge(publisher, consumer_app, color=color, title=f"Status: {status}")

    # Create a custom hierarchical layout
    pos = nx.spring_layout(G, seed=42)  # Initial layout
    layers = {}
    for node in nx.topological_sort(G):
        layer = len(nx.ancestors(G, node))
        if layer not in layers:
            layers[layer] = []
        layers[layer].append(node)

    # Adjust positions for a hierarchical structure
    y_gap = 100  # vertical gap between layers
    x_gap = 200  # horizontal gap between nodes
    for i, layer in enumerate(sorted(layers.keys())):
        for j, node in enumerate(layers[layer]):
            pos[node] = (j * x_gap, -i * y_gap)
    
    return G, pos

# Set up the Streamlit sidebar
st.sidebar.title("Event Status Visualization")
event_id = st.sidebar.text_input("Enter Event ID:")

if st.sidebar.button("Get Event Status"):
    if event_id:
        response = requests.get(f"http://localhost:5000/events/{event_id}")
        if response.status_code == 200:
            event_data = response.json()

            # Create the graph
            G, pos = create_hierarchical_graph(event_data)

            # Create a Network object
            net = Network(height='600px', width='100%', bgcolor='white', font_color='black', directed=True)

            # Add nodes and edges to the Network object
            for node, data in G.nodes(data=True):
                net.add_node(node, label=data['label'], title=data['title'], color=data['color'])

            for source, target, data in G.edges(data=True):
                net.add_edge(source, target, color=data['color'], title=data['title'])

            # Generate the HTML file
            net.show('event_status_graph.html')

            # Display the graph
            HtmlFile = open('event_status_graph.html', 'r', encoding='utf-8')
            source_code = HtmlFile.read()
            components.html(source_code, height=700, width=1000)
        else:
            st.error("Event not found")
    else:
        st.error("Please enter a valid Event ID")
