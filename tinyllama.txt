import streamlit as st
import requests
from datetime import datetime

# Helper function to get event counts
def get_event_count(start, end):
    url = "http://localhost:5000/events/date-range"
    payload = {
        "start_date": start.isoformat(),
        "end_date": end.isoformat()
    }
    response = requests.post(url, json=payload)
    return response.json()

# Set up the Streamlit sidebar
st.sidebar.title("Event Status Visualization")

# Feature 1: Search by Date and Time
st.header("Search by Date and Time")
start_date = st.date_input("Start date")
start_time = st.time_input("Start time")
end_date = st.date_input("End date")
end_time = st.time_input("End time")

if st.button("Get Event Counts"):
    start = datetime.combine(start_date, start_time)
    end = datetime.combine(end_date, end_time)
    event_counts = get_event_count(start, end)

    st.write("## Event Counts")

    # Display the event counts in a two-column layout
    count = 0
    cols = st.columns(2)

    for producer, counts in event_counts['producers'].items():
        with cols[count % 2]:
            # Display producer box
            st.markdown(f"<div style='padding: 20px; background-color: lightgray; border-radius: 5px;'><b>Produced by {producer}</b><br><b>Produced Count:</b> {counts['producedCount']}</div>", unsafe_allow_html=True)

            # Display each consumer under the producer
            for consumer, details in counts['consumedBy'].items():
                consumer_box = f"""
                <div style='padding: 20px; background-color: lightblue; border-radius: 5px; margin-top: 10px;'>
                    <h4 style='text-align: center;'>{consumer}</h4>
                    <b>Consumed Count:</b> {details['consumedCount']}<br>
                """
                if details['discrepancies']:
                    consumer_box += "<span style='color: red;'>Mismatch detected!</span><br>"
                    if st.button(f"View unconsumed events for {consumer}", key=f"btn_{consumer}"):
                        st.session_state['discrepancies'] = details['discrepancies']
                        st.experimental_rerun()
                consumer_box += "</div>"
                st.markdown(consumer_box, unsafe_allow_html=True)

        count += 1

# Feature to display discrepancies
if 'discrepancies' in st.session_state:
    st.write("### Unconsumed Events")
    st.write(st.session_state['discrepancies'])
    if st.button("Back"):
        del st.session_state['discrepancies']
        st.experimental_rerun()
