import streamlit as st
import requests
from datetime import datetime, timezone

# Base URL of the Spring Boot backend
BASE_URL = "http://localhost:8080/events"

def get_event_count(start, end):
    response = requests.get(f"{BASE_URL}/count", params={"start": start.isoformat(), "end": end.isoformat()})
    return response.json()

def get_unconsumed_events(start, end):
    response = requests.get(f"{BASE_URL}/unconsumed", params={"start": start.isoformat(), "end": end.isoformat()})
    return response.json()

def get_event_status(event_id):
    response = requests.get(f"{BASE_URL}/status/{event_id}")
    return response.json()

st.title("Event Monitoring Dashboard")

# Sidebar for toggling between features
st.sidebar.title("Navigation")
feature = st.sidebar.radio("Go to", ("Search by Date and Time", "Search by Event ID"))

if feature == "Search by Date and Time":
    st.header("Search by Date and Time")

    start_datetime = st.sidebar.datetime_input("Start date and time", value=datetime.now())
    end_datetime = st.sidebar.datetime_input("End date and time", value=datetime.now())

    if st.sidebar.button("Get Event Counts"):
        start = start_datetime.replace(tzinfo=timezone.utc)
        end = end_datetime.replace(tzinfo=timezone.utc)
        event_counts = get_event_count(start, end)
        st.write(f"Produced by ODS: {event_counts['producedCount']}")
        st.write(f"Consumed by IRWS: {event_counts['consumedCount']}")

        if event_counts['producedCount'] != event_counts['consumedCount']:
            st.warning("Mismatch detected! See unconsumed events below.")
            unconsumed_events = get_unconsumed_events(start, end)
            st.write("Unconsumed Events:")
            for event in unconsumed_events:
                st.write(event['evtId'])

elif feature == "Search by Event ID":
    st.header("Search by Event ID")
    event_id = st.sidebar.text_input("Event ID")

    if st.sidebar.button("Get Event Status"):
        event_status = get_event_status(event_id)
        st.write(f"Event ID: {event_status['evtId']}")
        st.write(f"Producer Timestamp: {event_status['producerTimestamp']}")
        st.write(f"Consumer Timestamp: {event_status['consumerTimestamp']}")
        st.write(f"Status: {event_status['status']}")
