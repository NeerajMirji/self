import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.OffsetAndTimestamp;
import org.apache.kafka.common.TopicPartition;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

@Service
public class KafkaOffsetService {

    private static final Logger logger = LoggerFactory.getLogger(KafkaOffsetService.class);

    @Autowired
    private KafkaConsumer<String, String> kafkaConsumer;

    public Map<TopicPartition, Long> getEndOffsetsForTimestamp(String topic, long timestamp) {
        Map<TopicPartition, Long> endOffsets = new HashMap<>();
        kafkaConsumer.partitionsFor(topic).forEach(partitionInfo -> {
            TopicPartition partition = new TopicPartition(partitionInfo.topic(), partitionInfo.partition());
            kafkaConsumer.assign(Collections.singletonList(partition));
            kafkaConsumer.seekToEnd(Collections.singletonList(partition));
            long endOffset = kafkaConsumer.position(partition);

            Map<TopicPartition, Long> timestampsToSearch = new HashMap<>();
            timestampsToSearch.put(partition, timestamp);
            Map<TopicPartition, OffsetAndTimestamp> offsetsForTimes = kafkaConsumer.offsetsForTimes(timestampsToSearch);

            OffsetAndTimestamp offsetAndTimestamp = offsetsForTimes.get(partition);
            long offsetToUse;
            if (offsetAndTimestamp != null && offsetAndTimestamp.offset() <= endOffset) {
                offsetToUse = offsetAndTimestamp.offset();
            } else {
                offsetToUse = endOffset;
            }

            endOffsets.put(partition, offsetToUse);
            logger.info("Partition: {}, Timestamp: {}, Offset: {}", partition.partition(), timestamp, offsetToUse);
        });
        return endOffsets;
    }
}
